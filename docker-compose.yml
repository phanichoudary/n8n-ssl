version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - ./nginx-custom.conf:/etc/nginx/conf.d/custom.conf:ro
    networks:
      - proxy-network
    restart: unless-stopped

  # Let's Encrypt Companion
  letsencrypt:
    image: nginxproxy/acme-companion:latest
    container_name: letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx-certs:/etc/nginx/certs:rw
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - acme-state:/etc/acme.sh
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy
    networks:
      - proxy-network
    depends_on:
      - nginx-proxy
    restart: unless-stopped

  # n8n (Ennetan) Application
  n8n:
    image: n8nio/n8n:nightly
    container_name: ennetan
    environment:
      # Domain and SSL settings
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=5678
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      
      # n8n specific settings
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN}/
      - GENERIC_TIMEZONE=${TIMEZONE:-America/New_York}
      
      # Database settings (using PostgreSQL is recommended for production)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      
      # Encryption key (IMPORTANT: Keep this secret and backed up)
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n-data:/home/node/.n8n
      - n8n-files:/files
    networks:
      - proxy-network
      - internal
    depends_on:
      - postgres
    restart: unless-stopped

  # PostgreSQL Database for n8n
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  proxy-network:
    driver: bridge
  internal:
    driver: bridge

volumes:
  nginx-certs:
  nginx-vhost:
  nginx-html:
  acme-state:
  n8n-data:
  n8n-files:
  postgres-data:
